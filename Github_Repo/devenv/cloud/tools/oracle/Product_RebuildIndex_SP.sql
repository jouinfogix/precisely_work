

/***
First set permission for IAUSER and ERUSER to create SP.
Login as IA to run the SP creation. Then login as ER to do the same.
The stored procedures for IA/ER are the same.
***/

/* 
  grant create procedure to IAUSER;
  grant create procedure to ERUSER;
  
  */
--------------------------------------



CREATE OR REPLACE PROCEDURE 
PROC_REBUILD_INDEX(
   OWNER IN VARCHAR2,
   INDEX_NAME IN VARCHAR2)
AS
BEGIN
   EXECUTE IMMEDIATE
         'ALTER INDEX "'
      || OWNER
      || '"."'
      || INDEX_NAME
      || '" REBUILD NOLOGGING';
END; 

/

CREATE OR REPLACE PROCEDURE 
PROC_MOVE_INDEX_TABLESPACE(
   OWNER VARCHAR2,
   INDEX_NAME VARCHAR2,
   DES_TABLESPACE_NAME VARCHAR2)
AS
BEGIN
   EXECUTE IMMEDIATE
         'ALTER INDEX "'
      || OWNER
      || '"."'
      || INDEX_NAME
      || '" REBUILD TABLESPACE '
      || DES_TABLESPACE_NAME;

   PROC_REBUILD_INDEX(OWNER,INDEX_NAME);

END;  

/

CREATE OR REPLACE PROCEDURE 
PROC_REBUILD_INVALID_INDEXES
AS
  
BEGIN
   FOR rec IN (
        SELECT idx.OWNER, idx.INDEX_NAME
        FROM all_indexes idx, all_tables tbs
          WHERE idx.TABLE_OWNER=tbs.OWNER and idx.TABLE_NAME=tbs.TABLE_NAME
                and tbs.owner LIKE '%USER' and idx.status <> 'VALID')
   LOOP
      	PROC_REBUILD_INDEX(rec.OWNER,rec.INDEX_NAME);
   END LOOP;

END; 

/

CREATE OR REPLACE PROCEDURE 
PROC_MOVE_INDEXES(
  SOURCE_TABLESPACE_NAME VARCHAR2,
  DES_TABLESPACE_NAME VARCHAR2,
  ROWCOUNT INTEGER
)
AS
BEGIN

   FOR rec IN (
        SELECT idx.OWNER, idx.INDEX_NAME
          FROM all_indexes idx
    WHERE idx.tablespace_name IN (SOURCE_TABLESPACE_NAME)
          and idx.INDEX_TYPE = 'NORMAL' AND ROWNUM <= ROWCOUNT)
   LOOP
      PROC_MOVE_INDEX_TABLESPACE(rec.OWNER,rec.INDEX_NAME,DES_TABLESPACE_NAME) ;
   END LOOP;
   
      PROC_REBUILD_INVALID_INDEXES;
END; 

/

CREATE OR REPLACE PROCEDURE 
PROC_MOVE_ONE_PRODUCT_INDEXES
AS
  PRODUCT VARCHAR2(20);
  ROWCOUNT INTEGER;
  DYNAMIC_TABLESPACE_NAME VARCHAR2(100);
  SOURCE_TABLESPACE_NAME VARCHAR2(100);
  SOURCE_TABLESPACE_NAME2 VARCHAR2(100);
  DES_TABLESPACE_NAME VARCHAR2(100);
  MIN_LAST_ANALYZED DATE;
  MIN_LAST_ANALYZED2 DATE;
BEGIN 
   ROWCOUNT := 200;
   SELECT USER INTO PRODUCT FROM DUAL;
   PRODUCT := REPLACE(PRODUCT, 'USER', '');
   DYNAMIC_TABLESPACE_NAME := PRODUCT || '_DYNOBJECTS';
   SOURCE_TABLESPACE_NAME :=  DYNAMIC_TABLESPACE_NAME || '_IDX';
   SOURCE_TABLESPACE_NAME2 := SOURCE_TABLESPACE_NAME || '2';
   SELECT  MIN(LAST_ANALYZED) INTO MIN_LAST_ANALYZED FROM ALL_INDEXES WHERE TABLESPACE_NAME IN (SOURCE_TABLESPACE_NAME);
   SELECT  MIN(LAST_ANALYZED) INTO MIN_LAST_ANALYZED2 FROM ALL_INDEXES WHERE TABLESPACE_NAME IN (SOURCE_TABLESPACE_NAME2);
   
   IF(MIN_LAST_ANALYZED2 IS NULL) THEN
        DES_TABLESPACE_NAME := SOURCE_TABLESPACE_NAME2;
   ELSIF(MIN_LAST_ANALYZED IS NULL) THEN
        DES_TABLESPACE_NAME := SOURCE_TABLESPACE_NAME;
        SOURCE_TABLESPACE_NAME  := SOURCE_TABLESPACE_NAME2;
   ELSIF(MIN_LAST_ANALYZED <= MIN_LAST_ANALYZED2) THEN
        DES_TABLESPACE_NAME := SOURCE_TABLESPACE_NAME2;
   ELSE
        DES_TABLESPACE_NAME := SOURCE_TABLESPACE_NAME;
        SOURCE_TABLESPACE_NAME := SOURCE_TABLESPACE_NAME2;
   END IF;
   
   PROC_MOVE_INDEXES(DYNAMIC_TABLESPACE_NAME, DES_TABLESPACE_NAME, ROWCOUNT);
   PROC_MOVE_INDEXES(SOURCE_TABLESPACE_NAME, DES_TABLESPACE_NAME, ROWCOUNT);

END;  
/
