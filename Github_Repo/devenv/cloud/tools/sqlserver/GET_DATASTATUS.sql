USE IAIGXDB
GO

IF exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GET_DATASTATUS]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[GET_DATASTATUS];
END;
GO

/*

    Name:           [dbo].[Get_CustomData]
    Author:         Jingsong Ou
    Written:        2017-05-17
    Purpose:        Getting product specific information. 
	                Will write to ERROR Log.
    Modified:       Jingsong Ou at 2021-08-26
	                Fix the overflow error when retrieving TOTALSIZE_GB by converting to DECIMAL(18, 2)
	Exmaple: 
	         DECLARE @OUTPUT NVARCHAR(2000);
	         EXEC [dbo].[GET_DATASTATUS] @OUTPUT OUTPUT;
			 PRINT @OUTPUT;

    Edit History:   2017-05-17 - Jingsong Ou
                        + Initial creation.

*/

CREATE PROCEDURE [dbo].[GET_DATASTATUS]
 @OUTPUT NVARCHAR(2000) OUTPUT
AS
BEGIN
SET NOCOUNT ON;
DECLARE @TABLE_NAMES TABLE
(
  ID   INT IDENTITY(1,1) NOT NULL
  ,TABLE_CATALOG NVARCHAR(100) NOT NULL
  ,TABLE_SCHEMA NVARCHAR(100) NOT NULL
  ,TABLE_NAME NVARCHAR(100) NOT NULL
);
DECLARE @TABLE_SPACE TABLE
( 
  ID INT IDENTITY(1,1) NOT NULL
  ,TABLE_CATALOG NVARCHAR(100) NULL
  ,TABLE_SCHEMA NVARCHAR(100) NULL
  ,TABLE_NAME NVARCHAR(100) NOT NULL
  ,rows     CHAR(11)
  ,reserved NVARCHAR(15)
  ,data     NVARCHAR(18)
  ,indexes  NVARCHAR(18)
  ,unused   NVARCHAR(18)
  ,data_num AS CAST(REPLACE(data, 'KB', '') AS DECIMAL(19, 2)) / 1024.00 / 1024.00
  ,indexes_num AS CAST(REPLACE(indexes, 'KB', '') AS DECIMAL(19, 2))  / 1024.00 / 1024.00
);
DECLARE 
@ROWCOUNT INT
,@i INT
,@str NVARCHAR(100)
,@TABLE_CATALOG NVARCHAR(100)
,@TABLE_SCHEMA NVARCHAR(100)
,@TABLE_NAME nvarchar(100)
,@DATETIMESTR NVARCHAR(50)
,@TOTAL_COUNT NVARCHAR(50)
,@SUM_RECORDCOUNT NVARCHAR(50)
,@SOURCESIZE NVARCHAR(50)
,@MAX_NUMOFROWS NVARCHAR(200);

SET @OUTPUT =  CHAR(13) + CHAR(10);

DECLARE @CURRENT_DATE DATE = CAST(SYSUTCDATETIME() AS DATE);
DECLARE @PREVIOUS_DATE DATE = DATEADD(DAY, -1, @CURRENT_DATE);

SET @DATETIMESTR = CONVERT(NVARCHAR(50), SYSUTCDATETIME(), 120);
SELECT @TOTAL_COUNT= CAST(COUNT(1) AS NVARCHAR(50)), @SUM_RECORDCOUNT = CAST(SUM(RECORDCOUNT) AS NVARCHAR(50))
FROM IAIGXDB.dbo.EXCEPTIONCATALOG WHERE RETURNCODE != 16 AND BEGINDATE BETWEEN @PREVIOUS_DATE AND @CURRENT_DATE;

SET @TOTAL_COUNT = ISNULL(@TOTAL_COUNT, 0);
SET @SUM_RECORDCOUNT = ISNULL(@SUM_RECORDCOUNT, 0);

SELECT TOP 1 @MAX_NUMOFROWS = X.DBNAME + '|' + X.TABLE_NAME + '|' + CAST(RowCnt AS NVARCHAR(50)) FROM (
SELECT 
    'IAUSER' AS DBNAME, ta.name TABLE_NAME, SUM(pa.rows) RowCnt
FROM 
    IAIGXDB.sys.tables ta
INNER JOIN IAIGXDB.sys.partitions pa ON pa.OBJECT_ID = ta.OBJECT_ID
INNER JOIN IAIGXDB.sys.schemas sc ON ta.schema_id = sc.schema_id
WHERE ta.is_ms_shipped = 0 AND pa.index_id IN (1,0)
GROUP BY sc.name,ta.name
UNION
SELECT 
    'ERUSER' AS DBNAME, ta.name TABLE_NAME, SUM(pa.rows) RowCnt
FROM 
    ERIGXDB.sys.tables ta
INNER JOIN ERIGXDB.sys.partitions pa ON pa.OBJECT_ID = ta.OBJECT_ID
INNER JOIN ERIGXDB.sys.schemas sc ON ta.schema_id = sc.schema_id
WHERE ta.is_ms_shipped = 0 AND pa.index_id IN (1,0)
GROUP BY sc.name,ta.name
UNION
SELECT 
    'IVUSER' AS DBNAME, ta.name TABLE_NAME, SUM(pa.rows) RowCnt
FROM 
    IVIGXDB.sys.tables ta
INNER JOIN IVIGXDB.sys.partitions pa ON pa.OBJECT_ID = ta.OBJECT_ID
INNER JOIN IVIGXDB.sys.schemas sc ON ta.schema_id = sc.schema_id
WHERE ta.is_ms_shipped = 0 AND pa.index_id IN (1,0)
GROUP BY sc.name,ta.name
UNION
SELECT 
    'IIUSER' AS DBNAME, ta.name TABLE_NAME, SUM(pa.rows) RowCnt
FROM 
    IIIGXDB.sys.tables ta
INNER JOIN IIIGXDB.sys.partitions pa ON pa.OBJECT_ID = ta.OBJECT_ID
INNER JOIN IIIGXDB.sys.schemas sc ON ta.schema_id = sc.schema_id
WHERE ta.is_ms_shipped = 0 AND pa.index_id IN (1,0)
GROUP BY sc.name,ta.name
UNION
SELECT 
    'EBUSER' AS DBNAME, ta.name TABLE_NAME, SUM(pa.rows) RowCnt
FROM 
    EBIGXDB.sys.tables ta
INNER JOIN EBIGXDB.sys.partitions pa ON pa.OBJECT_ID = ta.OBJECT_ID
INNER JOIN EBIGXDB.sys.schemas sc ON ta.schema_id = sc.schema_id
WHERE ta.is_ms_shipped = 0 AND pa.index_id IN (1,0)
GROUP BY sc.name,ta.name
) X ORDER BY X.RowCnt DESC;


SELECT  @SOURCESIZE = CAST(SUM(SOURCESIZE) AS NVARCHAR(50)) 
FROM IAIGXDB.dbo.CAPTURESOURCE
WHERE SOURCESIZE IS NOT NULL AND
      LOADDATE BETWEEN @PREVIOUS_DATE AND @CURRENT_DATE;

SET @SOURCESIZE = ISNULL(@SOURCESIZE, 0);

SET @OUTPUT = @OUTPUT + 'CUSTOMLOG;CONTROLS_EXECUTED;' + @TOTAL_COUNT + ';' + @DATETIMESTR + CHAR(13) + CHAR(10);
SET @OUTPUT = @OUTPUT + 'CUSTOMLOG;RECORDS_PROCESSED;' + @SUM_RECORDCOUNT + ';' + @DATETIMESTR + CHAR(13) + CHAR(10);
SET @OUTPUT = @OUTPUT + 'CUSTOMLOG;SOURCESIZE;' + @SOURCESIZE + ';' + @DATETIMESTR + CHAR(13) + CHAR(10);
SET @OUTPUT = @OUTPUT + 'CUSTOMLOG;MAX_NUMOFROWS;' + @MAX_NUMOFROWS + ';' + @DATETIMESTR + CHAR(13) + CHAR(10);


INSERT INTO @TABLE_NAMES(TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME)
SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME from ERIGXDB.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'
UNION
SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME from IAIGXDB.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'
UNION
SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME from IIIGXDB.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'
UNION
SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME from IVIGXDB.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'
ORDER BY TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME;

SET @ROWCOUNT = @@ROWCOUNT;
SET @i = 1;
WHILE @i <= @ROWCOUNT
BEGIN
  SELECT @TABLE_CATALOG = TABLE_CATALOG, @TABLE_SCHEMA = TABLE_SCHEMA, @TABLE_NAME = TABLE_NAME
   FROM @TABLE_NAMES WHERE ID = @i;
  IF (@TABLE_CATALOG = 'ERIGXDB')
  BEGIN
      SET @str = @TABLE_SCHEMA + '.' + @TABLE_NAME;
	  INSERT INTO @TABLE_SPACE
	  ( TABLE_NAME
		,rows 
		,reserved
		,data
		,indexes
		,unused)
	  EXEC ERIGXDB.dbo.sp_spaceused @str;
  END
  ELSE IF(@TABLE_CATALOG = 'IAIGXDB')
  BEGIN
        SET @str = @TABLE_SCHEMA + '.' + @TABLE_NAME;
	  INSERT INTO @TABLE_SPACE
	  ( TABLE_NAME
		,rows 
		,reserved
		,data
		,indexes
		,unused)
	  EXEC IAIGXDB.dbo.sp_spaceused @str;
  END
  ELSE IF(@TABLE_CATALOG = 'IIIGXDB')
  BEGIN
      SET @str = @TABLE_SCHEMA + '.' + @TABLE_NAME;
	  INSERT INTO @TABLE_SPACE
	  ( TABLE_NAME
		,rows 
		,reserved
		,data
		,indexes
		,unused)
	  EXEC IIIGXDB.dbo.sp_spaceused @str;

  END
  ELSE IF(@TABLE_CATALOG = 'IVIGXDB')
  BEGIN
      SET @str = @TABLE_SCHEMA + '.' + @TABLE_NAME;
	  INSERT INTO @TABLE_SPACE
	  ( TABLE_NAME
		,rows 
		,reserved
		,data
		,indexes
		,unused)
	  EXEC IVIGXDB.dbo.sp_spaceused @str
  END
  ELSE
  BEGIN
     SET @str = 'unhandled TABLE_CATALOG:' + ISNULL(@TABLE_CATALOG, '');
	 RAISERROR(@str, 10, 1) WITH LOG;  
  END;
  
  SET @TABLE_CATALOG = REPLACE(@TABLE_CATALOG, 'IGXDB', 'USER');

  UPDATE @TABLE_SPACE SET TABLE_CATALOG = @TABLE_CATALOG, TABLE_SCHEMA = @TABLE_SCHEMA
  WHERE TABLE_CATALOG IS NULL AND TABLE_SCHEMA IS NULL AND ID = SCOPE_IDENTITY();

  SET    @i += 1;
END;

SELECT  @OUTPUT = @OUTPUT  + 'CUSTOMLOG;PRODUCTSIZE;' 
      + [OWNER] + '|' + CAST(TOTALSIZE_GB AS VARCHAR(20)) + ';' + @DATETIMESTR + CHAR(13) + CHAR(10)
FROM (
	SELECT  TABLE_CATALOG AS [OWNER], CONVERT(DECIMAL(18, 2), SUM(data_num + indexes_num)) AS TOTALSIZE_GB 
	FROM @TABLE_SPACE
	GROUP BY TABLE_CATALOG) X ORDER BY [OWNER];

SET NOCOUNT OFF;
END;