
BEGIN
DBMS_SCHEDULER.DROP_JOB(JOB_NAME => 'DATASTATUS');
END;
/

BEGIN
dbms_scheduler.create_job(job_name => 'DATASTATUS',
job_type => 'PLSQL_BLOCK',
job_action => '
BEGIN
DECLARE 
DBNAME NVARCHAR2(10);
DATETIMESTR NVARCHAR2(50);
TOTAL_COUNT NVARCHAR2(50);
SUM_RECORDCOUNT NVARCHAR2(50);
SOURCESIZE NVARCHAR2(50);
MAX_NUMOFROWS NVARCHAR2(200);
v_file_handle utl_file.file_type;
OUTPUT NVARCHAR2(2000);
BEGIN
SELECT NAME INTO DBNAME FROM V$DATABASE;
SELECT CAST(SYSTIMESTAMP AS NVARCHAR2(50)) INTO DATETIMESTR FROM DUAL;
SELECT CAST(COUNT(1) AS NVARCHAR2(50)), CAST(sum(RECORDCOUNT) AS NVARCHAR2(50)) INTO TOTAL_COUNT, SUM_RECORDCOUNT 
FROM IAUSER.EXCEPTIONCATALOG WHERE RETURNCODE != 16 and BEGINDATE BETWEEN CAST(TO_CHAR(SYSDATE-1) AS TIMESTAMP(6)) AND CAST(TO_CHAR(SYSDATE) AS TIMESTAMP(6));

SELECT MAX_NUMOFROWS INTO MAX_NUMOFROWS FROM (
SELECT OWNER || ''|'' || TABLE_NAME || ''|'' || CAST(NUM_ROWS AS NVARCHAR2(50)) "MAX_NUMOFROWS"
FROM DBA_TABLES C
WHERE OWNER LIKE ''%USER'' 
ORDER BY NUM_ROWS DESC
) X WHERE ROWNUM = 1;

SELECT  CAST(SUM(SOURCESIZE) AS NVARCHAR2(50)) INTO SOURCESIZE
FROM IAUSER.CAPTURESOURCE
WHERE SOURCESIZE IS NOT NULL AND
      LOADDATE BETWEEN CAST(TO_CHAR(SYSDATE-1) AS TIMESTAMP(6)) AND CAST(TO_CHAR(SYSDATE) AS TIMESTAMP(6));
      
v_file_handle:=utl_file.fopen(''BDUMP'',''alert_'' || DBNAME || ''.log'', ''a'');
OUTPUT := ''CUSTOMLOG;CONTROLS_EXECUTED;'' || TOTAL_COUNT || '';'' || DATETIMESTR;
utl_file.put_line (v_file_handle, OUTPUT);
OUTPUT := ''CUSTOMLOG;RECORDS_PROCESSED;'' || SUM_RECORDCOUNT || '';'' || DATETIMESTR;
utl_file.put_line (v_file_handle, OUTPUT);
IF(SOURCESIZE IS NOT NULL) THEN
    OUTPUT := ''CUSTOMLOG;SOURCESIZE;'' || SOURCESIZE || '';'' || DATETIMESTR;
    utl_file.put_line (v_file_handle, OUTPUT);
END IF;

OUTPUT := ''CUSTOMLOG;MAX_NUMOFROWS;'' || MAX_NUMOFROWS || '';'' || DATETIMESTR;
utl_file.put_line (v_file_handle, OUTPUT);
OUTPUT := '''';
FOR rec IN (
        SELECT OWNER, JOB_NAME, "ERROR#" "STATUS", RUN_DURATION
        FROM dba_scheduler_job_run_details
        WHERE job_name IN (''REBUILDINDEXES'', ''CLEAN_TABLESPACES'') 
        AND ACTUAL_START_DATE BETWEEN CAST(TO_CHAR(SYSDATE-1) AS TIMESTAMP(6)) AND CAST(TO_CHAR(SYSDATE) AS TIMESTAMP(6))
        )
   LOOP
      OUTPUT := OUTPUT || ''CUSTOMLOG;SCHEDULEDJOB;'' || rec.OWNER || ''|'' || rec.JOB_NAME || ''|'' || rec.STATUS || ''|'' || rec.RUN_DURATION || '';'' || DATETIMESTR || CHR(13) || CHR(10);
   END LOOP;
   
utl_file.put_line (v_file_handle, OUTPUT);
utl_file.fclose (v_file_handle);
END;
END;',
start_date => systimestamp,
repeat_interval => 'FREQ=DAILY;INTERVAL=1;BYHOUR=06;BYMINUTE=30;',
enabled => TRUE);
END;
/
